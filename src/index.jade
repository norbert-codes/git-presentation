doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Introducing Git

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Introducing Git
        img.gitlogo(src="images/git_icon.png")


      section
        h1 What is Git?
        ul
          li
          li
            h3 Git is a <a href="https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control">Version Control System</a>


      section
        h2 What is "version control"?
        ul
          li
          li
            h3.emphasize Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.


      section
        h3 Just like a time machine
        img.fullw(src="images/backtothefuture.gif")


      section
        h2 Why should I care?
        ul
          li
          li
            h3 It allows you to:
          li revert files back to a previous state
          li revert the entire project
          li compare changes over time
          li see who modified something that might be causing a problem
          li
            h4 generally, if you screw things up, you can easily recover
          li
            h4 <em>and of course you can't overwrite each others work</em>


      section.background.mindblown.emphatic-text
        h1.white OMG!!!


      section
        h2 How does this work?
        ul
          li
          li Git is a Distributed Version Control System, where clients don’t just check out the latest snapshot of the files: they fully mirror the repository.
          li If any server dies repositories can be copied back up to the server to restore it.
          

      section.background.distributed


      section
        h2 Snapshots baby!
        ul
          li
          li <strong>others:</strong> information as a list of file-based changes
          li <strong>Git:</strong> "set of snapshots of a miniature filesystem"
          li <small>Git takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored.</small>
          li
            img.inline-img(src="images/snapshots.png")


      section
        h2 <small>Nearly</small> every operation is local
        ul
          li
          li Remember? You have the whole database mirrored.
          li For example, to browse the history of the project.
          li You can see the changes introduced between the current version of a file and the file a month ago instantly.


      section
        h2 The three states
        ul
          li
          li <strong>comitted</strong> (safely stored in local database)
          li <strong>modified</strong> (you changed it, but not stored in database yet)
          li <strong>staged</strong> (changed and marked to be in next commit)
          li <strong>+ pushed</strong> (copied to the remote repository from local database)
          li three main sections of a Git project: the Git directory, the working directory, and the staging area
          li
            img.inline-img(src="images/stages.png")


      section
        h3 Recording changes to the repository
        ul
          li
            img.inline-img(src="images/lifecycle.png")
          li files can be in two states: <strong>tracked or untracked</strong>
          li tracked files were in the last snapshot; they either <strong>unmodified,</strong> <strong>modified,</strong> or <strong>staged</strong>
          li as you edit files, Git sees them as <strong>modified,</strong> because you’ve changed them since your last commit
          li stage modified files and then <strong>commit all your staged changes,</strong> and the cycle repeats


      section.background.git-puzzled
        h2.white You may start to feel like...


      section
          h2 Ignoring files
          ul
            li
            li Often, you’ll have a class of files that you don’t want Git to automatically add or even show you as being untracked.
            li In such cases, you can create a file listing patterns to match them named <strong>.gitignore.</strong>
            li
              pre
                code.language-git.
                  /.idea
                  prepros.cfg
                  *.iml
                  *.sublime-project
                  .DS_Store
                  /node_modules


      section
        h2 Skipping the staging area
        p.fullw Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
        p.fullw If you want to skip the staging area, Git provides a simple shortcut.
        ul
          li
          li
            pre
              code.language-git.
                $ git commit -a
            p makes Git automatically stage every file that is already tracked before doing the commit


      section.background.git-workflow

      section.background.git-gif
        h2.white.dark-bg Basic Git workflow


      section
        h2 Weapons of choice
        img.tools(src="images/tools.png")
        p <small>Luckily there are many good tools to use Git, so no need to type commands into terminal any more</small>
        p We prefer <strong>IntelliJ IDEA,</strong> which:
        ul
          li is much more then a simple Git client [aka overkill as sh!t] :(
          li <small>but...</small>
          li has great graphical git interface
          li has powerful diff and merge tools
          li and of course as a <small>(extremely powerful)</small> code editor itself, you don't need to use an external editor


      section.background.incaseoffire


      section
        h3 Sources, and reading
        p
          a(href='https://git-scm.com/book/en/v2') Pro Git book
        p
          a(href='http://rogerdudler.github.io/git-guide/') git - the simple guide <small>by Roger Dudler</small>
        p
          a(href='https://www.jetbrains.com/idea/help/using-git-integration.html') Git integration in IntelliJ IDEA
        h1.thanks Thank you!

      script(src='build/build.js')